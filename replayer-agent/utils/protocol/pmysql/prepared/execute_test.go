package prepared

import (
	"bytes"
	"testing"

	"github.com/modern-go/parse"
	"github.com/stretchr/testify/require"
)

func TestDecodeStmtExecutePacket(t *testing.T) {
	var testCase = []struct {
		raw    []byte
		expect *StmtExecuteBody
	}{
		{
			raw: []byte{
				0x2c, 0x00, 0x00, 0x00, 0x17, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
				0x00, 0x00, 0x00, 0x01, 0xfe, 0x00, 0x08, 0x00, 0x08, 0x00, 0x09, 0x72,
				0x6f, 0x6e, 0x61, 0x6c, 0x64, 0x6f, 0x31, 0x32, 0x17, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
			expect: &StmtExecuteBody{
				StatementID: 2,
				Flag:        0,
				ExtraBytes: []byte{0x00, 0x01, 0xfe, 0x00, 0x08, 0x00, 0x08, 0x00, 0x09, 0x72,
					0x6f, 0x6e, 0x61, 0x6c, 0x64, 0x6f, 0x31, 0x32, 0x17, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				},
			},
		},
	}
	should := require.New(t)
	for idx, tc := range testCase {
		src, err := parse.NewSource(bytes.NewReader(tc.raw), 10)
		should.NoError(err)
		actual, err := DecodeStmtExecutePacket(src)

		should.NoError(err, "case #%d fail", idx)
		should.Equal(tc.expect, actual, "case #%d fail", idx)
	}
}
