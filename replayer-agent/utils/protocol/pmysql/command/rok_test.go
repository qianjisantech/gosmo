package command

import (
	"bytes"
	"testing"

	"github.com/modern-go/parse"
	"github.com/stretchr/testify/require"
)

func TestDecodeOKPacket(t *testing.T) {
	var testCase = []struct {
		rawBytes []byte
		expect   *OKResp
		err      error
	}{
		{
			rawBytes: []byte{
				0x30, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x22, 0x00, 0x00, 0x00, 0x28,
				0x52, 0x6f, 0x77, 0x73, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
				0x3a, 0x20, 0x32, 0x20, 0x20, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
				0x3a, 0x20, 0x32, 0x20, 0x20, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
				0x73, 0x3a, 0x20, 0x30,
			},
			expect: &OKResp{
				Header:       0x00,
				AffectedRows: 2,
				LastInsertID: 0,
				StatusFlag:   0x0022,
				Warnings:     0,
				ExtraBytes:   []byte("(Rows matched: 2  Changed: 2  Warnings: 0"),
			},
			err: nil,
		},
		{
			rawBytes: []byte{
				0x30, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x22, 0x00, 0x00, 0x00, 0x28,
				0x52, 0x6f, 0x77, 0x73, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
				0x3a, 0x20, 0x31, 0x20, 0x20, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
				0x3a, 0x20, 0x31, 0x20, 0x20, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
				0x73, 0x3a, 0x20, 0x30,
			},
			expect: &OKResp{
				Header:       0x00,
				AffectedRows: 1,
				LastInsertID: 0,
				StatusFlag:   0x0022,
				Warnings:     0,
				ExtraBytes:   []byte("(Rows matched: 1  Changed: 1  Warnings: 0"),
			},
			err: nil,
		},
	}
	should := require.New(t)
	for idx, tc := range testCase {
		src, err := parse.NewSource(bytes.NewReader(tc.rawBytes), 10)
		should.NoError(err)
		actual, err := DecodeOKPacket(src)
		should.Equal(tc.err, err, "case #%d fail", idx)
		should.Equal(tc.expect.String(), actual.String(), "case #%d fail", idx)
	}
}
