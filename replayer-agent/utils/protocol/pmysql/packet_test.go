package pmysql

import (
	"testing"

	"github.com/stretchr/testify/require"
)

func TestGetTCPPayload(t *testing.T) {
	var testCase = []struct {
		rawBytes []byte
		expect   []byte
	}{
		{
			rawBytes: []byte{
				0x98, 0x01, 0xa7, 0xa5, 0x76, 0x3f, 0x00, 0xf2, /* ....v?.. */
				0x8b, 0xee, 0x4a, 0x31, 0x08, 0x00, 0x45, 0x00, /* ..J1..E. */
				0x00, 0x82, 0xa2, 0x50, 0x40, 0x00, 0x38, 0x06, /* ...P@.8. */
				0x81, 0x1f, 0x0a, 0x60, 0x50, 0x86, 0xac, 0x18, /* ...`P... */
				0x18, 0x08, 0x0c, 0xea, 0xc6, 0xc9, 0xd1, 0x48, /* .......H */
				0x84, 0x5e, 0xc0, 0x0a, 0x9e, 0xc0, 0x80, 0x18, /* .^...... */
				0x00, 0xe3, 0x52, 0xd8, 0x00, 0x00, 0x01, 0x01, /* ..R..... */
				0x08, 0x0a, 0x65, 0x1c, 0x26, 0x13, 0x3c, 0xb5, /* ..e.&.<. */
				0xa1, 0x1c, 0x4a, 0x00, 0x00, 0x00, 0x0a, 0x35, /* ..J....5 */
				0x2e, 0x37, 0x2e, 0x32, 0x30, 0x00, 0x12, 0x00, /* .7.20... */
				0x00, 0x00, 0x6e, 0x55, 0x57, 0x71, 0x68, 0x11, /* ..nUWqh. */
				0x40, 0x36, 0x00, 0xff, 0xf7, 0x08, 0x02, 0x00, /* @6...... */
				0xff, 0x81, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
				0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x43, 0x6e, /* .....<Cn */
				0x29, 0x77, 0x57, 0x4b, 0x53, 0x23, 0x6f, 0x6d, /* )wWKS#om */
				0x6e, 0x00, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x5f, /* n.mysql_ */
				0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, /* native_p */
				0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x00, /* assword. */
			},
			expect: []byte{
				0x4a, 0x00, 0x00, 0x00, 0x0a, 0x35, /* ..J....5 */
				0x2e, 0x37, 0x2e, 0x32, 0x30, 0x00, 0x12, 0x00, /* .7.20... */
				0x00, 0x00, 0x6e, 0x55, 0x57, 0x71, 0x68, 0x11, /* ..nUWqh. */
				0x40, 0x36, 0x00, 0xff, 0xf7, 0x08, 0x02, 0x00, /* @6...... */
				0xff, 0x81, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
				0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x43, 0x6e, /* .....<Cn */
				0x29, 0x77, 0x57, 0x4b, 0x53, 0x23, 0x6f, 0x6d, /* )wWKS#om */
				0x6e, 0x00, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x5f, /* n.mysql_ */
				0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, /* native_p */
				0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x00, /* assword. */
			},
		},
	}
	should := require.New(t)
	for _, tc := range testCase {
		actual, err := GetTCPPayload(tc.rawBytes)
		should.NoError(err)
		should.Equal(tc.expect, actual)
	}
}
